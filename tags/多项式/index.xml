<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多项式 on Roger Young</title>
    <link>https://acm.rogery.dev/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/</link>
    <description>Recent content in 多项式 on Roger Young</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>© 2021 [Roger Young](https://acm.rogery.dev)</copyright>
    <lastBuildDate>Thu, 22 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://acm.rogery.dev/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>FFT &amp; NTT 学习笔记</title>
      <link>https://acm.rogery.dev/post/learn-fft/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://acm.rogery.dev/post/learn-fft/</guid>
      <description>以下是我对 FFT 的感性理解，可能并不严谨，如有错误欢迎指正。
FFT 以下讲述的算法是 Cooley–Tukey FFT，它在算法竞赛中使用的更为广泛。
前置知识：复数，需要理解 Euler 公式。
多项式乘法 对于 $n$ 次多项式
$$ \begin{aligned} f(x) = \sum_{i=0}^n f_ix^i &amp;= f_0 + f_1 x + f_2x^2 + \cdots + g_nx^n \\ g(x) = \sum_{i=0}^n g_ix^i &amp;= g_0 + g_1 x + g_2x^2 + \cdots + g_nx^n \end{aligned} $$ 它们的卷积是 $F(x) = f(x) \ast g(x) = (f \ast g)(x) = \sum\limits_{k=0}^{2n} c_kx^k$ ，其中
$$ c_k = \sum_{i+j=k}f_ig_j $$ 因此朴素的计算多项式的卷积需要 $n^2$ 次系数乘法，我们需要优化。</description>
    </item>
    
  </channel>
</rss>
